@using System.Globalization;
@page "/budget"
@inject NavigationManager NavManager

<PageTitle>Budget</PageTitle>

<div class="fluid-container">
    <h2 class="font bold white-heading">Summary</h2>
    <div class="row">
        <div class="col-lg-6 col-xl-3">
            <RadzenCard class="m-3 crd-primary ">
                <h3 class="font bold white-heading">£3000.00</h3>
                <p class="font white-heading">Last months income</p>
            </RadzenCard>
            <RadzenCard class="m-3 crd-primary ">
                <h3 class="font bold white-heading">£1478.78</h3>
                <p class="font white-heading">Monthly budget spend</p>
            </RadzenCard>
        </div>
        <div class="col-sm-12 col-lg-6 col-xl-3 my-5 crd-primary">
            <RadzenChart>
                <RadzenPieSeries Data="@expenditureByCategoriesWithRemaining" Title="Revenue" CategoryProperty="Category" ValueProperty="Amount" />
            </RadzenChart>
        </div>
        <div class="col-sm-12 my-5 crd-primary">
            <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@salaryItems" CategoryProperty="Date" Title="Salary" ValueProperty="Salary">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                <RadzenValueAxis Formatter="@FormatAsGBP">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Revenue in GBP" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
    <div class="row">
        <h2 class="font bold white-heading col-xl-3">Budget line items</h2>
        <RadzenButton class="col-xl-1 btn-primary" Click="AddNewBudgetItem" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"></RadzenButton>
    </div>
    <div class="row">
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
            Data="@budgetLineItems" TItem="BudgetLine" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="BudgetLine" Property="LineItemName" Filterable="false" Title="Line Item Name" Width="70px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="BudgetLine" Property="Cost" Title="Cost" Width="140px"  />
                <RadzenDataGridColumn TItem="BudgetLine" Property="Category" Title="Category" Width="140px" />
                <RadzenDataGridColumn TItem="BudgetLine" Property="PaymentMethod" Title="Payment Method" Width="140px"/>
                <RadzenDataGridColumn TItem="BudgetLine" Property="ContractEndDate" Title="Contract End Date" Width="200px" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>


@code {

    public double Income = 3773.89;

    List<DataItem> expenditureByCategoriesWithRemaining;
    List<BudgetLine> budgetLineItems;
    List<SalaryItem> salaryItems;

    
    string FormatAsGBP(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-GB"));
    }

    protected override async void OnInitialized() {

        expenditureByCategoriesWithRemaining = new List<DataItem> {
            new DataItem
            {
                Category = "Debt",
                Amount = Math.Round((366 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Entertainment",
                Amount = Math.Round((43.68 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Health",
                Amount = Math.Round((11.3 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Business",
                Amount = Math.Round((11.4 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Utility",
                Amount = Math.Round((1046.40 / Income) * 100, 2)
            },
            
        };

        expenditureByCategoriesWithRemaining.Add(
            new DataItem
            {
                Category = "Remaining",
                Amount = expenditureByCategoriesWithRemaining.Sum(item => item.Amount)
            }
        );

        budgetLineItems = new List<BudgetLine> {
            new BudgetLine
            {
                LineItemName = "Apple Music",
                Cost = "£14.99",
                Category = "Entertainment",
                PaymentMethod = "American Express",
                ContractEndDate = "Rolling month",
            },
        };

        salaryItems = new List<SalaryItem> {
            new SalaryItem
            {
                Date = DateTime.Parse("2012-07-09"),
                Salary = 10000
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2012-09-03"),
                Salary = 16000
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2014-01-01"),
                Salary = 19000
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2015-01-01"),
                Salary = 20898
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2015-08-01"),
                Salary = 24573
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2016-01-01"),
                Salary = 27509
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2016-08-01"),
                Salary = 29689
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2017-01-01"),
                Salary = 31689
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2017-08-01"),
                Salary = 34400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2018-01-01"),
                Salary = 35400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2018-08-01"),
                Salary = 37400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2019-01-01"),
                Salary = 42400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2019-08-01"),
                Salary = 47400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2020-01-01"),
                Salary = 49900
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2020-08-01"),
                Salary = 54400
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2021-01-01"),
                Salary = 56610
            },
            new SalaryItem
            {
                Date = DateTime.Parse("2022-01-01"),
                Salary = 64897
            }
        };
    }

    public void AddNewBudgetItem() {
        NavManager.NavigateTo("/newbudgetlineitem");
    }

    class DataItem {
        public string Category { get; set; }
        public double Amount { get; set; }
    }

    class BudgetLine {
        public string LineItemName { get; set; }
        public string Cost { get; set; }
        public string Category { get; set; }
        public string PaymentMethod { get; set; }
        public string ContractEndDate { get; set; }
    }

     class SalaryItem
    {
        public DateTime Date { get; set; }
        public double Salary { get; set; }
    }
}
