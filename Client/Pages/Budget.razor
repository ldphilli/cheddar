@page "/budget"

<PageTitle>Budget</PageTitle>

<h2 class="font-family">Summary</h2>

<div class="container">
    <div class="row">
        <div class="col-lg-6 col-xl-4 offset-lg-3 offset-xl-4">
            <RadzenCard class="m-3">
                <h3 class="h5">Monthly budget spend</h3>
                <b>£1478.78</b>
            </RadzenCard>
        </div>
        <div class="col-sm-12 col-lg-6 offset-lg-3 my-5">
            <RadzenChart>
                <RadzenPieSeries Data="@expenditureByCategoriesWithRemaining" Title="Revenue" CategoryProperty="Category" ValueProperty="Amount" />
            </RadzenChart>
        </div>
    </div>
</div>

<RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"></RadzenButton>

<h2>Budget line items</h2>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
        Data="@budgetLineItems" TItem="BudgetLine" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="BudgetLine" Property="LineItemName" Filterable="false" Title="Line Item Name" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="BudgetLine" Property="Cost" Title="Cost" Frozen="true" Width="140px"  />
            <RadzenDataGridColumn TItem="BudgetLine" Property="Category" Title="Category" Width="140px" />
            <RadzenDataGridColumn TItem="BudgetLine" Property="PaymentMethod" Title="Payment Method" Width="140px"/>
            <RadzenDataGridColumn TItem="BudgetLine" Property="ContractEndDate" Title="Contract End Date" Width="200px" />
        </Columns>
    </RadzenDataGrid>

<div class="row px-3">
    <div class="col-md-6 col-lg-4 p-3">
        <RadzenCard>
            <h4 class="mb-4">Budget Line Item Name</h4>
            <RadzenTextBox Placeholder="Apple Music" />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 p-3">
        <RadzenCard>
            <h4 class="mb-4">Monthly Cost</h4>
            <RadzenTextBox Placeholder="£14.99" />
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Category</h4>
            <RadzenDropDown TValue="ItemCategory" Class="w-100" 
                            Data=@itemCategories TextProperty="ItemCategoryName"/>
        </RadzenCard>
    </div>
    <div class="col-md-6 col-lg-4 col-xl-3 p-3">
        <RadzenCard>
            <h4 class="mb-4">Payment Methods</h4>
            <RadzenDropDown AllowClear="true" TValue="PaymentMethod" Class="w-100" 
                            Data=@paymentMethods TextProperty="PaymentMethodName"/>
        </RadzenCard>
    </div>
    <div class="col-lg-6 col-xl-4 p-3">
        <RadzenCard>
            <h4 class="mb-4">Contract End Date</h4>
            <RadzenDatePicker @bind-Value=@contractEndDate DateFormat="d" />
        </RadzenCard>
    </div>
</div>



@code {

    public double Income = 3773.89;
    DateTime? contractEndDate = DateTime.Now;

    List<DataItem> expenditureByCategoriesWithRemaining;
    List<PaymentMethod> paymentMethods;
    List<ItemCategory> itemCategories;
    List<BudgetLine> budgetLineItems;

    protected override void OnInitialized() {

        expenditureByCategoriesWithRemaining = new List<DataItem> {
            new DataItem
            {
                Category = "Debt",
                Amount = Math.Round((366 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Entertainment",
                Amount = Math.Round((43.68 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Health",
                Amount = Math.Round((11.3 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Business",
                Amount = Math.Round((11.4 / Income) * 100, 2)
            },
            new DataItem
            {
                Category = "Utility",
                Amount = Math.Round((1046.40 / Income) * 100, 2)
            },
            
        };

        expenditureByCategoriesWithRemaining.Add(
            new DataItem
            {
                Category = "Remaining",
                Amount = expenditureByCategoriesWithRemaining.Sum(item => item.Amount)
            }
        );

        paymentMethods = new List<PaymentMethod> {
            new PaymentMethod
            {
                PaymentMethodName = "American Express",
            },
            new PaymentMethod
            {
                PaymentMethodName = "Paypal",
            },
            new PaymentMethod
            {
                PaymentMethodName = "Lloyds",
            },
            new PaymentMethod
            {
                PaymentMethodName = "Starling",
            },
        };

        itemCategories = new List<ItemCategory> {
            new ItemCategory
            {
                ItemCategoryName = "Business",
            },
            new ItemCategory
            {
                ItemCategoryName = "Debt",
            },
            new ItemCategory
            {
                ItemCategoryName = "Entertainment",
            },
            new ItemCategory
            {
                ItemCategoryName = "Health",
            },
            new ItemCategory
            {
                ItemCategoryName = "Remaining",
            },
            new ItemCategory
            {
                ItemCategoryName = "Utility",
            },
        };

        budgetLineItems = new List<BudgetLine> {
            new BudgetLine
            {
                LineItemName = "Apple Music",
                Cost = "£14.99",
                Category = "Entertainment",
                PaymentMethod = "American Express",
                ContractEndDate = "Rolling month",
            },
        };
    }

    class DataItem {
        public string Category { get; set; }
        public double Amount { get; set; }
    }

    class PaymentMethod {
        public string PaymentMethodName { get; set; }
    }

    class ItemCategory {
        public string ItemCategoryName { get; set; }
    }

    class BudgetLine {
        public string LineItemName { get; set; }
        public string Cost { get; set; }
        public string Category { get; set; }
        public string PaymentMethod { get; set; }
        public string ContractEndDate { get; set; }
    }
}
