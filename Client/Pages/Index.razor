@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigate

<PageTitle>Index</PageTitle>
<div class="fluid-container h-100">
    <div class="row">
        <div class="col-xl-1">
            Logo placeholder
        </div>
    </div>
    <div class="row h-100 justify-content-center">
        <div class="col-xl-4 offset-md-1 mx-xl-auto align-self-center text-center">
            <h1 class="font white-heading bold">Welcome to Cheddar</h1>
            <h2 class="font white-heading">Your Aid to Personal Finance</h2>
            <div class="col-xl-4 mx-auto">
                <LoginDisplay></LoginDisplay>
            </div>
        </div>
        <div class="col-xl-6 my-xl-auto">
            @if(imageSource is not null) {
                <img src="@imageSource" />
            }
        </div>
    </div>
</div>

 @code {

    private bool authenticated;
    private string? imageSource;

    protected override void OnInitialized()
    {
        Task<AuthenticationState> _currentAuthenticationStateTask;
        imageSource = $"images/mock-up.jpg";

        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        _currentAuthenticationStateTask = 
            AuthenticationStateProvider.GetAuthenticationStateAsync();

        OnAuthenticationStateChanged(_currentAuthenticationStateTask);
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> authenticationStateTask)
    {
            var authState = await authenticationStateTask;

            var user = authState.User;

            authenticated = user.Identity?.IsAuthenticated ?? false;

            Console.WriteLine("OnAuthenticationStateChanged - {0}", authenticated);

            if (authenticated) {       
                Navigate.NavigateTo("budget");
            }
            StateHasChanged();
    }
}